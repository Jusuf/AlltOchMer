#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WU15.AlltOchMer.Model
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="WU15.AlltOchMer")]
	public partial class AlltOchMerDataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCategory(Category instance);
    partial void UpdateCategory(Category instance);
    partial void DeleteCategory(Category instance);
    partial void InsertCategoryName(CategoryName instance);
    partial void UpdateCategoryName(CategoryName instance);
    partial void DeleteCategoryName(CategoryName instance);
    partial void InsertCountry(Country instance);
    partial void UpdateCountry(Country instance);
    partial void DeleteCountry(Country instance);
    partial void InsertCurrency(Currency instance);
    partial void UpdateCurrency(Currency instance);
    partial void DeleteCurrency(Currency instance);
    partial void InsertLanguage(Language instance);
    partial void UpdateLanguage(Language instance);
    partial void DeleteLanguage(Language instance);
    partial void InsertPriceList(PriceList instance);
    partial void UpdatePriceList(PriceList instance);
    partial void DeletePriceList(PriceList instance);
    partial void InsertProduct(Product instance);
    partial void UpdateProduct(Product instance);
    partial void DeleteProduct(Product instance);
    partial void InsertProductCategory(ProductCategory instance);
    partial void UpdateProductCategory(ProductCategory instance);
    partial void DeleteProductCategory(ProductCategory instance);
    partial void InsertProductDescription(ProductDescription instance);
    partial void UpdateProductDescription(ProductDescription instance);
    partial void DeleteProductDescription(ProductDescription instance);
    partial void InsertProductPriceList(ProductPriceList instance);
    partial void UpdateProductPriceList(ProductPriceList instance);
    partial void DeleteProductPriceList(ProductPriceList instance);
    partial void InsertProductSaleTax(ProductSaleTax instance);
    partial void UpdateProductSaleTax(ProductSaleTax instance);
    partial void DeleteProductSaleTax(ProductSaleTax instance);
    partial void InsertProductSupplier(ProductSupplier instance);
    partial void UpdateProductSupplier(ProductSupplier instance);
    partial void DeleteProductSupplier(ProductSupplier instance);
    partial void InsertSaleTax(SaleTax instance);
    partial void UpdateSaleTax(SaleTax instance);
    partial void DeleteSaleTax(SaleTax instance);
    partial void InsertShoppingBasket(ShoppingBasket instance);
    partial void UpdateShoppingBasket(ShoppingBasket instance);
    partial void DeleteShoppingBasket(ShoppingBasket instance);
    partial void InsertShoppingBasketProduct(ShoppingBasketProduct instance);
    partial void UpdateShoppingBasketProduct(ShoppingBasketProduct instance);
    partial void DeleteShoppingBasketProduct(ShoppingBasketProduct instance);
    partial void InsertSupplier(Supplier instance);
    partial void UpdateSupplier(Supplier instance);
    partial void DeleteSupplier(Supplier instance);
    #endregion
		
		public AlltOchMerDataClassesDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["WU15_AlltOchMerConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public AlltOchMerDataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AlltOchMerDataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AlltOchMerDataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AlltOchMerDataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Category> Categories
		{
			get
			{
				return this.GetTable<Category>();
			}
		}
		
		public System.Data.Linq.Table<CategoryName> CategoryNames
		{
			get
			{
				return this.GetTable<CategoryName>();
			}
		}
		
		public System.Data.Linq.Table<Country> Countries
		{
			get
			{
				return this.GetTable<Country>();
			}
		}
		
		public System.Data.Linq.Table<Currency> Currencies
		{
			get
			{
				return this.GetTable<Currency>();
			}
		}
		
		public System.Data.Linq.Table<Language> Languages
		{
			get
			{
				return this.GetTable<Language>();
			}
		}
		
		public System.Data.Linq.Table<PriceList> PriceLists
		{
			get
			{
				return this.GetTable<PriceList>();
			}
		}
		
		public System.Data.Linq.Table<Product> Products
		{
			get
			{
				return this.GetTable<Product>();
			}
		}
		
		public System.Data.Linq.Table<ProductCategory> ProductCategories
		{
			get
			{
				return this.GetTable<ProductCategory>();
			}
		}
		
		public System.Data.Linq.Table<ProductDescription> ProductDescriptions
		{
			get
			{
				return this.GetTable<ProductDescription>();
			}
		}
		
		public System.Data.Linq.Table<ProductPriceList> ProductPriceLists
		{
			get
			{
				return this.GetTable<ProductPriceList>();
			}
		}
		
		public System.Data.Linq.Table<ProductSaleTax> ProductSaleTaxes
		{
			get
			{
				return this.GetTable<ProductSaleTax>();
			}
		}
		
		public System.Data.Linq.Table<ProductSupplier> ProductSuppliers
		{
			get
			{
				return this.GetTable<ProductSupplier>();
			}
		}
		
		public System.Data.Linq.Table<SaleTax> SaleTaxes
		{
			get
			{
				return this.GetTable<SaleTax>();
			}
		}
		
		public System.Data.Linq.Table<ShoppingBasket> ShoppingBaskets
		{
			get
			{
				return this.GetTable<ShoppingBasket>();
			}
		}
		
		public System.Data.Linq.Table<ShoppingBasketProduct> ShoppingBasketProducts
		{
			get
			{
				return this.GetTable<ShoppingBasketProduct>();
			}
		}
		
		public System.Data.Linq.Table<Supplier> Suppliers
		{
			get
			{
				return this.GetTable<Supplier>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Category")]
	public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _ParentId;
		
		private EntitySet<Category> _Categories;
		
		private EntitySet<CategoryName> _CategoryNames;
		
		private EntitySet<ProductCategory> _ProductCategories;
		
		private EntityRef<Category> _Category1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnParentIdChanging(System.Nullable<int> value);
    partial void OnParentIdChanged();
    #endregion
		
		public Category()
		{
			this._Categories = new EntitySet<Category>(new Action<Category>(this.attach_Categories), new Action<Category>(this.detach_Categories));
			this._CategoryNames = new EntitySet<CategoryName>(new Action<CategoryName>(this.attach_CategoryNames), new Action<CategoryName>(this.detach_CategoryNames));
			this._ProductCategories = new EntitySet<ProductCategory>(new Action<ProductCategory>(this.attach_ProductCategories), new Action<ProductCategory>(this.detach_ProductCategories));
			this._Category1 = default(EntityRef<Category>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentId", DbType="Int")]
		public System.Nullable<int> ParentId
		{
			get
			{
				return this._ParentId;
			}
			set
			{
				if ((this._ParentId != value))
				{
					if (this._Category1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentIdChanging(value);
					this.SendPropertyChanging();
					this._ParentId = value;
					this.SendPropertyChanged("ParentId");
					this.OnParentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Category", Storage="_Categories", ThisKey="Id", OtherKey="ParentId")]
		public EntitySet<Category> Categories
		{
			get
			{
				return this._Categories;
			}
			set
			{
				this._Categories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_CategoryName", Storage="_CategoryNames", ThisKey="Id", OtherKey="CategoryId")]
		public EntitySet<CategoryName> CategoryNames
		{
			get
			{
				return this._CategoryNames;
			}
			set
			{
				this._CategoryNames.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_ProductCategory", Storage="_ProductCategories", ThisKey="Id", OtherKey="CategoryId")]
		public EntitySet<ProductCategory> ProductCategories
		{
			get
			{
				return this._ProductCategories;
			}
			set
			{
				this._ProductCategories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Category", Storage="_Category1", ThisKey="ParentId", OtherKey="Id", IsForeignKey=true)]
		public Category Category1
		{
			get
			{
				return this._Category1.Entity;
			}
			set
			{
				Category previousValue = this._Category1.Entity;
				if (((previousValue != value) 
							|| (this._Category1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category1.Entity = null;
						previousValue.Categories.Remove(this);
					}
					this._Category1.Entity = value;
					if ((value != null))
					{
						value.Categories.Add(this);
						this._ParentId = value.Id;
					}
					else
					{
						this._ParentId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Category1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Categories(Category entity)
		{
			this.SendPropertyChanging();
			entity.Category1 = this;
		}
		
		private void detach_Categories(Category entity)
		{
			this.SendPropertyChanging();
			entity.Category1 = null;
		}
		
		private void attach_CategoryNames(CategoryName entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_CategoryNames(CategoryName entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
		
		private void attach_ProductCategories(ProductCategory entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_ProductCategories(ProductCategory entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CategoryName")]
	public partial class CategoryName : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CategoryId;
		
		private string _Name;
		
		private int _LanguageId;
		
		private EntityRef<Category> _Category;
		
		private EntityRef<Language> _Language;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCategoryIdChanging(int value);
    partial void OnCategoryIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnLanguageIdChanging(int value);
    partial void OnLanguageIdChanged();
    #endregion
		
		public CategoryName()
		{
			this._Category = default(EntityRef<Category>);
			this._Language = default(EntityRef<Language>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CategoryId
		{
			get
			{
				return this._CategoryId;
			}
			set
			{
				if ((this._CategoryId != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._CategoryId = value;
					this.SendPropertyChanged("CategoryId");
					this.OnCategoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LanguageId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int LanguageId
		{
			get
			{
				return this._LanguageId;
			}
			set
			{
				if ((this._LanguageId != value))
				{
					if (this._Language.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLanguageIdChanging(value);
					this.SendPropertyChanging();
					this._LanguageId = value;
					this.SendPropertyChanged("LanguageId");
					this.OnLanguageIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_CategoryName", Storage="_Category", ThisKey="CategoryId", OtherKey="Id", IsForeignKey=true)]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.CategoryNames.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.CategoryNames.Add(this);
						this._CategoryId = value.Id;
					}
					else
					{
						this._CategoryId = default(int);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Language_CategoryName", Storage="_Language", ThisKey="LanguageId", OtherKey="Id", IsForeignKey=true)]
		public Language Language
		{
			get
			{
				return this._Language.Entity;
			}
			set
			{
				Language previousValue = this._Language.Entity;
				if (((previousValue != value) 
							|| (this._Language.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Language.Entity = null;
						previousValue.CategoryNames.Remove(this);
					}
					this._Language.Entity = value;
					if ((value != null))
					{
						value.CategoryNames.Add(this);
						this._LanguageId = value.Id;
					}
					else
					{
						this._LanguageId = default(int);
					}
					this.SendPropertyChanged("Language");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Country")]
	public partial class Country : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _CountryCode;
		
		private System.Nullable<int> _CurrencyId;
		
		private EntitySet<SaleTax> _SaleTaxes;
		
		private EntityRef<Currency> _Currency;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCountryCodeChanging(string value);
    partial void OnCountryCodeChanged();
    partial void OnCurrencyIdChanging(System.Nullable<int> value);
    partial void OnCurrencyIdChanged();
    #endregion
		
		public Country()
		{
			this._SaleTaxes = new EntitySet<SaleTax>(new Action<SaleTax>(this.attach_SaleTaxes), new Action<SaleTax>(this.detach_SaleTaxes));
			this._Currency = default(EntityRef<Currency>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryCode", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string CountryCode
		{
			get
			{
				return this._CountryCode;
			}
			set
			{
				if ((this._CountryCode != value))
				{
					this.OnCountryCodeChanging(value);
					this.SendPropertyChanging();
					this._CountryCode = value;
					this.SendPropertyChanged("CountryCode");
					this.OnCountryCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrencyId", DbType="Int")]
		public System.Nullable<int> CurrencyId
		{
			get
			{
				return this._CurrencyId;
			}
			set
			{
				if ((this._CurrencyId != value))
				{
					if (this._Currency.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCurrencyIdChanging(value);
					this.SendPropertyChanging();
					this._CurrencyId = value;
					this.SendPropertyChanged("CurrencyId");
					this.OnCurrencyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_SaleTax", Storage="_SaleTaxes", ThisKey="Id", OtherKey="CountryId")]
		public EntitySet<SaleTax> SaleTaxes
		{
			get
			{
				return this._SaleTaxes;
			}
			set
			{
				this._SaleTaxes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Currency_Country", Storage="_Currency", ThisKey="CurrencyId", OtherKey="Id", IsForeignKey=true)]
		public Currency Currency
		{
			get
			{
				return this._Currency.Entity;
			}
			set
			{
				Currency previousValue = this._Currency.Entity;
				if (((previousValue != value) 
							|| (this._Currency.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Currency.Entity = null;
						previousValue.Countries.Remove(this);
					}
					this._Currency.Entity = value;
					if ((value != null))
					{
						value.Countries.Add(this);
						this._CurrencyId = value.Id;
					}
					else
					{
						this._CurrencyId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Currency");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SaleTaxes(SaleTax entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_SaleTaxes(SaleTax entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Currency")]
	public partial class Currency : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _CurrencyCode;
		
		private decimal _CurrencyValue;
		
		private EntitySet<Country> _Countries;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCurrencyCodeChanging(string value);
    partial void OnCurrencyCodeChanged();
    partial void OnCurrencyValueChanging(decimal value);
    partial void OnCurrencyValueChanged();
    #endregion
		
		public Currency()
		{
			this._Countries = new EntitySet<Country>(new Action<Country>(this.attach_Countries), new Action<Country>(this.detach_Countries));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrencyCode", DbType="NVarChar(3) NOT NULL", CanBeNull=false)]
		public string CurrencyCode
		{
			get
			{
				return this._CurrencyCode;
			}
			set
			{
				if ((this._CurrencyCode != value))
				{
					this.OnCurrencyCodeChanging(value);
					this.SendPropertyChanging();
					this._CurrencyCode = value;
					this.SendPropertyChanged("CurrencyCode");
					this.OnCurrencyCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrencyValue", DbType="Decimal(5,4) NOT NULL")]
		public decimal CurrencyValue
		{
			get
			{
				return this._CurrencyValue;
			}
			set
			{
				if ((this._CurrencyValue != value))
				{
					this.OnCurrencyValueChanging(value);
					this.SendPropertyChanging();
					this._CurrencyValue = value;
					this.SendPropertyChanged("CurrencyValue");
					this.OnCurrencyValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Currency_Country", Storage="_Countries", ThisKey="Id", OtherKey="CurrencyId")]
		public EntitySet<Country> Countries
		{
			get
			{
				return this._Countries;
			}
			set
			{
				this._Countries.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Countries(Country entity)
		{
			this.SendPropertyChanging();
			entity.Currency = this;
		}
		
		private void detach_Countries(Country entity)
		{
			this.SendPropertyChanging();
			entity.Currency = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Language")]
	public partial class Language : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<CategoryName> _CategoryNames;
		
		private EntitySet<ProductDescription> _ProductDescriptions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Language()
		{
			this._CategoryNames = new EntitySet<CategoryName>(new Action<CategoryName>(this.attach_CategoryNames), new Action<CategoryName>(this.detach_CategoryNames));
			this._ProductDescriptions = new EntitySet<ProductDescription>(new Action<ProductDescription>(this.attach_ProductDescriptions), new Action<ProductDescription>(this.detach_ProductDescriptions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Language_CategoryName", Storage="_CategoryNames", ThisKey="Id", OtherKey="LanguageId")]
		public EntitySet<CategoryName> CategoryNames
		{
			get
			{
				return this._CategoryNames;
			}
			set
			{
				this._CategoryNames.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Language_ProductDescription", Storage="_ProductDescriptions", ThisKey="Id", OtherKey="LanguageId")]
		public EntitySet<ProductDescription> ProductDescriptions
		{
			get
			{
				return this._ProductDescriptions;
			}
			set
			{
				this._ProductDescriptions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CategoryNames(CategoryName entity)
		{
			this.SendPropertyChanging();
			entity.Language = this;
		}
		
		private void detach_CategoryNames(CategoryName entity)
		{
			this.SendPropertyChanging();
			entity.Language = null;
		}
		
		private void attach_ProductDescriptions(ProductDescription entity)
		{
			this.SendPropertyChanging();
			entity.Language = this;
		}
		
		private void detach_ProductDescriptions(ProductDescription entity)
		{
			this.SendPropertyChanging();
			entity.Language = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PriceList")]
	public partial class PriceList : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private System.DateTime _ValidFrom;
		
		private EntitySet<ProductPriceList> _ProductPriceLists;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnValidFromChanging(System.DateTime value);
    partial void OnValidFromChanged();
    #endregion
		
		public PriceList()
		{
			this._ProductPriceLists = new EntitySet<ProductPriceList>(new Action<ProductPriceList>(this.attach_ProductPriceLists), new Action<ProductPriceList>(this.detach_ProductPriceLists));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ValidFrom", DbType="DateTime NOT NULL")]
		public System.DateTime ValidFrom
		{
			get
			{
				return this._ValidFrom;
			}
			set
			{
				if ((this._ValidFrom != value))
				{
					this.OnValidFromChanging(value);
					this.SendPropertyChanging();
					this._ValidFrom = value;
					this.SendPropertyChanged("ValidFrom");
					this.OnValidFromChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PriceList_ProductPriceList", Storage="_ProductPriceLists", ThisKey="Id", OtherKey="PriceListId")]
		public EntitySet<ProductPriceList> ProductPriceLists
		{
			get
			{
				return this._ProductPriceLists;
			}
			set
			{
				this._ProductPriceLists.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProductPriceLists(ProductPriceList entity)
		{
			this.SendPropertyChanging();
			entity.PriceList = this;
		}
		
		private void detach_ProductPriceLists(ProductPriceList entity)
		{
			this.SendPropertyChanging();
			entity.PriceList = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Product")]
	public partial class Product : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _ArticleNumber;
		
		private string _Name;
		
		private EntitySet<ProductCategory> _ProductCategories;
		
		private EntitySet<ProductDescription> _ProductDescriptions;
		
		private EntitySet<ProductPriceList> _ProductPriceLists;
		
		private EntitySet<ProductSaleTax> _ProductSaleTaxes;
		
		private EntitySet<ProductSupplier> _ProductSuppliers;
		
		private EntitySet<ShoppingBasketProduct> _ShoppingBasketProducts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnArticleNumberChanging(string value);
    partial void OnArticleNumberChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Product()
		{
			this._ProductCategories = new EntitySet<ProductCategory>(new Action<ProductCategory>(this.attach_ProductCategories), new Action<ProductCategory>(this.detach_ProductCategories));
			this._ProductDescriptions = new EntitySet<ProductDescription>(new Action<ProductDescription>(this.attach_ProductDescriptions), new Action<ProductDescription>(this.detach_ProductDescriptions));
			this._ProductPriceLists = new EntitySet<ProductPriceList>(new Action<ProductPriceList>(this.attach_ProductPriceLists), new Action<ProductPriceList>(this.detach_ProductPriceLists));
			this._ProductSaleTaxes = new EntitySet<ProductSaleTax>(new Action<ProductSaleTax>(this.attach_ProductSaleTaxes), new Action<ProductSaleTax>(this.detach_ProductSaleTaxes));
			this._ProductSuppliers = new EntitySet<ProductSupplier>(new Action<ProductSupplier>(this.attach_ProductSuppliers), new Action<ProductSupplier>(this.detach_ProductSuppliers));
			this._ShoppingBasketProducts = new EntitySet<ShoppingBasketProduct>(new Action<ShoppingBasketProduct>(this.attach_ShoppingBasketProducts), new Action<ShoppingBasketProduct>(this.detach_ShoppingBasketProducts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ArticleNumber", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string ArticleNumber
		{
			get
			{
				return this._ArticleNumber;
			}
			set
			{
				if ((this._ArticleNumber != value))
				{
					this.OnArticleNumberChanging(value);
					this.SendPropertyChanging();
					this._ArticleNumber = value;
					this.SendPropertyChanged("ArticleNumber");
					this.OnArticleNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_ProductCategory", Storage="_ProductCategories", ThisKey="Id", OtherKey="ProductId")]
		public EntitySet<ProductCategory> ProductCategories
		{
			get
			{
				return this._ProductCategories;
			}
			set
			{
				this._ProductCategories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_ProductDescription", Storage="_ProductDescriptions", ThisKey="Id", OtherKey="ProductId")]
		public EntitySet<ProductDescription> ProductDescriptions
		{
			get
			{
				return this._ProductDescriptions;
			}
			set
			{
				this._ProductDescriptions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_ProductPriceList", Storage="_ProductPriceLists", ThisKey="Id", OtherKey="ProductId")]
		public EntitySet<ProductPriceList> ProductPriceLists
		{
			get
			{
				return this._ProductPriceLists;
			}
			set
			{
				this._ProductPriceLists.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_ProductSaleTax", Storage="_ProductSaleTaxes", ThisKey="Id", OtherKey="ProductId")]
		public EntitySet<ProductSaleTax> ProductSaleTaxes
		{
			get
			{
				return this._ProductSaleTaxes;
			}
			set
			{
				this._ProductSaleTaxes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_ProductSupplier", Storage="_ProductSuppliers", ThisKey="Id", OtherKey="ProductId")]
		public EntitySet<ProductSupplier> ProductSuppliers
		{
			get
			{
				return this._ProductSuppliers;
			}
			set
			{
				this._ProductSuppliers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_ShoppingBasketProduct", Storage="_ShoppingBasketProducts", ThisKey="Id", OtherKey="ProductId")]
		public EntitySet<ShoppingBasketProduct> ShoppingBasketProducts
		{
			get
			{
				return this._ShoppingBasketProducts;
			}
			set
			{
				this._ShoppingBasketProducts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProductCategories(ProductCategory entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_ProductCategories(ProductCategory entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_ProductDescriptions(ProductDescription entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_ProductDescriptions(ProductDescription entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_ProductPriceLists(ProductPriceList entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_ProductPriceLists(ProductPriceList entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_ProductSaleTaxes(ProductSaleTax entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_ProductSaleTaxes(ProductSaleTax entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_ProductSuppliers(ProductSupplier entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_ProductSuppliers(ProductSupplier entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_ShoppingBasketProducts(ShoppingBasketProduct entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_ShoppingBasketProducts(ShoppingBasketProduct entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProductCategory")]
	public partial class ProductCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductId;
		
		private int _CategoryId;
		
		private EntityRef<Category> _Category;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductIdChanging(int value);
    partial void OnProductIdChanged();
    partial void OnCategoryIdChanging(int value);
    partial void OnCategoryIdChanged();
    #endregion
		
		public ProductCategory()
		{
			this._Category = default(EntityRef<Category>);
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CategoryId
		{
			get
			{
				return this._CategoryId;
			}
			set
			{
				if ((this._CategoryId != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._CategoryId = value;
					this.SendPropertyChanged("CategoryId");
					this.OnCategoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_ProductCategory", Storage="_Category", ThisKey="CategoryId", OtherKey="Id", IsForeignKey=true)]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.ProductCategories.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.ProductCategories.Add(this);
						this._CategoryId = value.Id;
					}
					else
					{
						this._CategoryId = default(int);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_ProductCategory", Storage="_Product", ThisKey="ProductId", OtherKey="Id", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.ProductCategories.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.ProductCategories.Add(this);
						this._ProductId = value.Id;
					}
					else
					{
						this._ProductId = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProductDescription")]
	public partial class ProductDescription : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductId;
		
		private string _Description;
		
		private int _LanguageId;
		
		private EntityRef<Language> _Language;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductIdChanging(int value);
    partial void OnProductIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnLanguageIdChanging(int value);
    partial void OnLanguageIdChanged();
    #endregion
		
		public ProductDescription()
		{
			this._Language = default(EntityRef<Language>);
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LanguageId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int LanguageId
		{
			get
			{
				return this._LanguageId;
			}
			set
			{
				if ((this._LanguageId != value))
				{
					if (this._Language.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLanguageIdChanging(value);
					this.SendPropertyChanging();
					this._LanguageId = value;
					this.SendPropertyChanged("LanguageId");
					this.OnLanguageIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Language_ProductDescription", Storage="_Language", ThisKey="LanguageId", OtherKey="Id", IsForeignKey=true)]
		public Language Language
		{
			get
			{
				return this._Language.Entity;
			}
			set
			{
				Language previousValue = this._Language.Entity;
				if (((previousValue != value) 
							|| (this._Language.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Language.Entity = null;
						previousValue.ProductDescriptions.Remove(this);
					}
					this._Language.Entity = value;
					if ((value != null))
					{
						value.ProductDescriptions.Add(this);
						this._LanguageId = value.Id;
					}
					else
					{
						this._LanguageId = default(int);
					}
					this.SendPropertyChanged("Language");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_ProductDescription", Storage="_Product", ThisKey="ProductId", OtherKey="Id", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.ProductDescriptions.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.ProductDescriptions.Add(this);
						this._ProductId = value.Id;
					}
					else
					{
						this._ProductId = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProductPriceList")]
	public partial class ProductPriceList : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductId;
		
		private int _PriceListId;
		
		private decimal _Price;
		
		private EntityRef<PriceList> _PriceList;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductIdChanging(int value);
    partial void OnProductIdChanged();
    partial void OnPriceListIdChanging(int value);
    partial void OnPriceListIdChanged();
    partial void OnPriceChanging(decimal value);
    partial void OnPriceChanged();
    #endregion
		
		public ProductPriceList()
		{
			this._PriceList = default(EntityRef<PriceList>);
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PriceListId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PriceListId
		{
			get
			{
				return this._PriceListId;
			}
			set
			{
				if ((this._PriceListId != value))
				{
					if (this._PriceList.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPriceListIdChanging(value);
					this.SendPropertyChanging();
					this._PriceListId = value;
					this.SendPropertyChanged("PriceListId");
					this.OnPriceListIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Decimal(7,0) NOT NULL")]
		public decimal Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PriceList_ProductPriceList", Storage="_PriceList", ThisKey="PriceListId", OtherKey="Id", IsForeignKey=true)]
		public PriceList PriceList
		{
			get
			{
				return this._PriceList.Entity;
			}
			set
			{
				PriceList previousValue = this._PriceList.Entity;
				if (((previousValue != value) 
							|| (this._PriceList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PriceList.Entity = null;
						previousValue.ProductPriceLists.Remove(this);
					}
					this._PriceList.Entity = value;
					if ((value != null))
					{
						value.ProductPriceLists.Add(this);
						this._PriceListId = value.Id;
					}
					else
					{
						this._PriceListId = default(int);
					}
					this.SendPropertyChanged("PriceList");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_ProductPriceList", Storage="_Product", ThisKey="ProductId", OtherKey="Id", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.ProductPriceLists.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.ProductPriceLists.Add(this);
						this._ProductId = value.Id;
					}
					else
					{
						this._ProductId = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProductSaleTax")]
	public partial class ProductSaleTax : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductId;
		
		private int _SaleTaxId;
		
		private EntityRef<Product> _Product;
		
		private EntityRef<SaleTax> _SaleTax;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductIdChanging(int value);
    partial void OnProductIdChanged();
    partial void OnSaleTaxIdChanging(int value);
    partial void OnSaleTaxIdChanged();
    #endregion
		
		public ProductSaleTax()
		{
			this._Product = default(EntityRef<Product>);
			this._SaleTax = default(EntityRef<SaleTax>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SaleTaxId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SaleTaxId
		{
			get
			{
				return this._SaleTaxId;
			}
			set
			{
				if ((this._SaleTaxId != value))
				{
					if (this._SaleTax.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSaleTaxIdChanging(value);
					this.SendPropertyChanging();
					this._SaleTaxId = value;
					this.SendPropertyChanged("SaleTaxId");
					this.OnSaleTaxIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_ProductSaleTax", Storage="_Product", ThisKey="ProductId", OtherKey="Id", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.ProductSaleTaxes.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.ProductSaleTaxes.Add(this);
						this._ProductId = value.Id;
					}
					else
					{
						this._ProductId = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SaleTax_ProductSaleTax", Storage="_SaleTax", ThisKey="SaleTaxId", OtherKey="Id", IsForeignKey=true)]
		public SaleTax SaleTax
		{
			get
			{
				return this._SaleTax.Entity;
			}
			set
			{
				SaleTax previousValue = this._SaleTax.Entity;
				if (((previousValue != value) 
							|| (this._SaleTax.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SaleTax.Entity = null;
						previousValue.ProductSaleTaxes.Remove(this);
					}
					this._SaleTax.Entity = value;
					if ((value != null))
					{
						value.ProductSaleTaxes.Add(this);
						this._SaleTaxId = value.Id;
					}
					else
					{
						this._SaleTaxId = default(int);
					}
					this.SendPropertyChanged("SaleTax");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProductSupplier")]
	public partial class ProductSupplier : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductId;
		
		private int _SupplierId;
		
		private EntityRef<Product> _Product;
		
		private EntityRef<Supplier> _Supplier;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductIdChanging(int value);
    partial void OnProductIdChanged();
    partial void OnSupplierIdChanging(int value);
    partial void OnSupplierIdChanged();
    #endregion
		
		public ProductSupplier()
		{
			this._Product = default(EntityRef<Product>);
			this._Supplier = default(EntityRef<Supplier>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupplierId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SupplierId
		{
			get
			{
				return this._SupplierId;
			}
			set
			{
				if ((this._SupplierId != value))
				{
					if (this._Supplier.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSupplierIdChanging(value);
					this.SendPropertyChanging();
					this._SupplierId = value;
					this.SendPropertyChanged("SupplierId");
					this.OnSupplierIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_ProductSupplier", Storage="_Product", ThisKey="ProductId", OtherKey="Id", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.ProductSuppliers.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.ProductSuppliers.Add(this);
						this._ProductId = value.Id;
					}
					else
					{
						this._ProductId = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Supplier_ProductSupplier", Storage="_Supplier", ThisKey="SupplierId", OtherKey="Id", IsForeignKey=true)]
		public Supplier Supplier
		{
			get
			{
				return this._Supplier.Entity;
			}
			set
			{
				Supplier previousValue = this._Supplier.Entity;
				if (((previousValue != value) 
							|| (this._Supplier.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Supplier.Entity = null;
						previousValue.ProductSuppliers.Remove(this);
					}
					this._Supplier.Entity = value;
					if ((value != null))
					{
						value.ProductSuppliers.Add(this);
						this._SupplierId = value.Id;
					}
					else
					{
						this._SupplierId = default(int);
					}
					this.SendPropertyChanged("Supplier");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SaleTax")]
	public partial class SaleTax : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private decimal _SalesTaxValue;
		
		private string _Name;
		
		private string _Description;
		
		private int _CountryId;
		
		private EntitySet<ProductSaleTax> _ProductSaleTaxes;
		
		private EntityRef<Country> _Country;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnSalesTaxValueChanging(decimal value);
    partial void OnSalesTaxValueChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCountryIdChanging(int value);
    partial void OnCountryIdChanged();
    #endregion
		
		public SaleTax()
		{
			this._ProductSaleTaxes = new EntitySet<ProductSaleTax>(new Action<ProductSaleTax>(this.attach_ProductSaleTaxes), new Action<ProductSaleTax>(this.detach_ProductSaleTaxes));
			this._Country = default(EntityRef<Country>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SalesTaxValue", DbType="Decimal(4,2) NOT NULL")]
		public decimal SalesTaxValue
		{
			get
			{
				return this._SalesTaxValue;
			}
			set
			{
				if ((this._SalesTaxValue != value))
				{
					this.OnSalesTaxValueChanging(value);
					this.SendPropertyChanging();
					this._SalesTaxValue = value;
					this.SendPropertyChanged("SalesTaxValue");
					this.OnSalesTaxValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryId", DbType="Int NOT NULL")]
		public int CountryId
		{
			get
			{
				return this._CountryId;
			}
			set
			{
				if ((this._CountryId != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryIdChanging(value);
					this.SendPropertyChanging();
					this._CountryId = value;
					this.SendPropertyChanged("CountryId");
					this.OnCountryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SaleTax_ProductSaleTax", Storage="_ProductSaleTaxes", ThisKey="Id", OtherKey="SaleTaxId")]
		public EntitySet<ProductSaleTax> ProductSaleTaxes
		{
			get
			{
				return this._ProductSaleTaxes;
			}
			set
			{
				this._ProductSaleTaxes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_SaleTax", Storage="_Country", ThisKey="CountryId", OtherKey="Id", IsForeignKey=true)]
		public Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.SaleTaxes.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.SaleTaxes.Add(this);
						this._CountryId = value.Id;
					}
					else
					{
						this._CountryId = default(int);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProductSaleTaxes(ProductSaleTax entity)
		{
			this.SendPropertyChanging();
			entity.SaleTax = this;
		}
		
		private void detach_ProductSaleTaxes(ProductSaleTax entity)
		{
			this.SendPropertyChanging();
			entity.SaleTax = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ShoppingBasket")]
	public partial class ShoppingBasket : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _GUID;
		
		private System.DateTime _CreatedDate;
		
		private EntitySet<ShoppingBasketProduct> _ShoppingBasketProducts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGUIDChanging(System.Guid value);
    partial void OnGUIDChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    #endregion
		
		public ShoppingBasket()
		{
			this._ShoppingBasketProducts = new EntitySet<ShoppingBasketProduct>(new Action<ShoppingBasketProduct>(this.attach_ShoppingBasketProducts), new Action<ShoppingBasketProduct>(this.detach_ShoppingBasketProducts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid GUID
		{
			get
			{
				return this._GUID;
			}
			set
			{
				if ((this._GUID != value))
				{
					this.OnGUIDChanging(value);
					this.SendPropertyChanging();
					this._GUID = value;
					this.SendPropertyChanged("GUID");
					this.OnGUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ShoppingBasket_ShoppingBasketProduct", Storage="_ShoppingBasketProducts", ThisKey="GUID", OtherKey="ShoppingBasketGUID")]
		public EntitySet<ShoppingBasketProduct> ShoppingBasketProducts
		{
			get
			{
				return this._ShoppingBasketProducts;
			}
			set
			{
				this._ShoppingBasketProducts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ShoppingBasketProducts(ShoppingBasketProduct entity)
		{
			this.SendPropertyChanging();
			entity.ShoppingBasket = this;
		}
		
		private void detach_ShoppingBasketProducts(ShoppingBasketProduct entity)
		{
			this.SendPropertyChanging();
			entity.ShoppingBasket = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ShoppingBasketProduct")]
	public partial class ShoppingBasketProduct : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ShoppingBasketGUID;
		
		private int _ProductId;
		
		private int _Quantity;
		
		private EntityRef<Product> _Product;
		
		private EntityRef<ShoppingBasket> _ShoppingBasket;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnShoppingBasketGUIDChanging(System.Guid value);
    partial void OnShoppingBasketGUIDChanged();
    partial void OnProductIdChanging(int value);
    partial void OnProductIdChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    #endregion
		
		public ShoppingBasketProduct()
		{
			this._Product = default(EntityRef<Product>);
			this._ShoppingBasket = default(EntityRef<ShoppingBasket>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShoppingBasketGUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ShoppingBasketGUID
		{
			get
			{
				return this._ShoppingBasketGUID;
			}
			set
			{
				if ((this._ShoppingBasketGUID != value))
				{
					if (this._ShoppingBasket.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnShoppingBasketGUIDChanging(value);
					this.SendPropertyChanging();
					this._ShoppingBasketGUID = value;
					this.SendPropertyChanged("ShoppingBasketGUID");
					this.OnShoppingBasketGUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int NOT NULL")]
		public int Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_ShoppingBasketProduct", Storage="_Product", ThisKey="ProductId", OtherKey="Id", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.ShoppingBasketProducts.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.ShoppingBasketProducts.Add(this);
						this._ProductId = value.Id;
					}
					else
					{
						this._ProductId = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ShoppingBasket_ShoppingBasketProduct", Storage="_ShoppingBasket", ThisKey="ShoppingBasketGUID", OtherKey="GUID", IsForeignKey=true)]
		public ShoppingBasket ShoppingBasket
		{
			get
			{
				return this._ShoppingBasket.Entity;
			}
			set
			{
				ShoppingBasket previousValue = this._ShoppingBasket.Entity;
				if (((previousValue != value) 
							|| (this._ShoppingBasket.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ShoppingBasket.Entity = null;
						previousValue.ShoppingBasketProducts.Remove(this);
					}
					this._ShoppingBasket.Entity = value;
					if ((value != null))
					{
						value.ShoppingBasketProducts.Add(this);
						this._ShoppingBasketGUID = value.GUID;
					}
					else
					{
						this._ShoppingBasketGUID = default(System.Guid);
					}
					this.SendPropertyChanged("ShoppingBasket");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Supplier")]
	public partial class Supplier : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<ProductSupplier> _ProductSuppliers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Supplier()
		{
			this._ProductSuppliers = new EntitySet<ProductSupplier>(new Action<ProductSupplier>(this.attach_ProductSuppliers), new Action<ProductSupplier>(this.detach_ProductSuppliers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Supplier_ProductSupplier", Storage="_ProductSuppliers", ThisKey="Id", OtherKey="SupplierId")]
		public EntitySet<ProductSupplier> ProductSuppliers
		{
			get
			{
				return this._ProductSuppliers;
			}
			set
			{
				this._ProductSuppliers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProductSuppliers(ProductSupplier entity)
		{
			this.SendPropertyChanging();
			entity.Supplier = this;
		}
		
		private void detach_ProductSuppliers(ProductSupplier entity)
		{
			this.SendPropertyChanging();
			entity.Supplier = null;
		}
	}
}
#pragma warning restore 1591
